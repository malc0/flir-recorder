#cython: language_level=3, boundscheck=False, wraparound=False, initializedcheck=False, cdivision=True

from libc.stdint cimport uint8_t

import numpy as np
cimport numpy as cnp

cdef uint8_t *iron = [  0, 0, 0,
			0, 0, 36,
			0, 0, 51,
			0, 0, 66,
			0, 0, 81,
			2, 0, 90,
			4, 0, 99,
			7, 0, 106,
			11, 0, 115,
			14, 0, 119,
			20, 0, 123,
			27, 0, 128,
			33, 0, 133,
			41, 0, 137,
			48, 0, 140,
			55, 0, 143,
			61, 0, 146,
			66, 0, 149,
			72, 0, 150,
			78, 0, 151,
			84, 0, 152,
			91, 0, 153,
			97, 0, 155,
			104, 0, 155,
			110, 0, 156,
			115, 0, 157,
			122, 0, 157,
			128, 0, 157,
			134, 0, 157,
			139, 0, 157,
			146, 0, 156,
			152, 0, 155,
			157, 0, 155,
			162, 0, 155,
			167, 0, 154,
			171, 0, 153,
			175, 1, 152,
			178, 1, 151,
			182, 2, 149,
			185, 4, 149,
			188, 5, 147,
			191, 6, 146,
			193, 8, 144,
			195, 11, 142,
			198, 13, 139,
			201, 17, 135,
			203, 20, 132,
			206, 23, 127,
			208, 26, 121,
			210, 29, 116,
			212, 33, 111,
			214, 37, 103,
			217, 41, 97,
			219, 46, 89,
			221, 49, 78,
			223, 53, 66,
			224, 56, 54,
			226, 60, 42,
			228, 64, 30,
			229, 68, 25,
			231, 72, 20,
			232, 76, 16,
			234, 78, 12,
			235, 82, 10,
			236, 86, 8,
			237, 90, 7,
			238, 93, 5,
			239, 96, 4,
			240, 100, 3,
			241, 103, 3,
			241, 106, 2,
			242, 109, 1,
			243, 113, 1,
			244, 116, 0,
			244, 120, 0,
			245, 125, 0,
			246, 129, 0,
			247, 133, 0,
			248, 136, 0,
			248, 139, 0,
			249, 142, 0,
			249, 145, 0,
			250, 149, 0,
			251, 154, 0,
			252, 159, 0,
			253, 163, 0,
			253, 168, 0,
			253, 172, 0,
			254, 176, 0,
			254, 179, 0,
			254, 184, 0,
			254, 187, 0,
			254, 191, 0,
			254, 195, 0,
			254, 199, 0,
			254, 202, 1,
			254, 205, 2,
			254, 208, 5,
			254, 212, 9,
			254, 216, 12,
			255, 219, 15,
			255, 221, 23,
			255, 224, 32,
			255, 227, 39,
			255, 229, 50,
			255, 232, 63,
			255, 235, 75,
			255, 238, 88,
			255, 239, 102,
			255, 241, 116,
			255, 242, 134,
			255, 244, 149,
			255, 245, 164,
			255, 247, 179,
			255, 248, 192,
			255, 249, 203,
			255, 251, 216,
			255, 253, 228,
			255, 254, 239,
			255, 255, 249 ]

cdef uint8_t *iron_y = [ 16, 20, 21, 22, 24, 25, 27, 28, 30, 31, 33, 35, 37, 40, 42, 44, 46, 48, 49, 51, 52, 54, 56, 58, 60, 61, 63, 64, 66, 67, 69, 70, 71, 73, 74, 75, 76, 77, 78, 80, 81, 82, 84, 86, 87, 89, 91, 93, 94, 96, 98, 100, 102, 104, 105, 106, 107, 108, 110, 112, 114, 115, 117, 119, 121, 123, 124, 126, 128, 130, 132, 133, 135, 137, 139, 142, 144, 146, 148, 150, 152, 153, 155, 158, 161, 163, 166, 168, 170, 171, 174, 175, 178, 180, 182, 183, 185, 187, 189, 191, 193, 195, 198, 200, 202, 205, 207, 210, 212, 214, 217, 219, 221, 224, 225, 227, 229, 231, 233, 234 ]
cdef uint8_t *iron_cb = [ 128, 144, 150, 157, 164, 167, 171, 174, 177, 178, 179, 180, 182, 182, 182, 183, 183, 184, 183, 183, 182, 182, 182, 181, 180, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 166, 165, 163, 162, 160, 158, 156, 153, 150, 147, 143, 139, 136, 131, 127, 121, 115, 109, 102, 95, 89, 85, 82, 79, 76, 74, 72, 70, 68, 66, 65, 64, 62, 61, 60, 58, 57, 55, 54, 53, 52, 51, 50, 49, 48, 46, 44, 43, 42, 40, 39, 38, 37, 36, 35, 34, 32, 32, 32, 32, 33, 33, 33, 36, 39, 41, 46, 50, 55, 60, 65, 71, 79, 85, 91, 97, 102, 107, 112, 117, 121, 125 ]
cdef uint8_t *iron_cr = [ 128, 125, 124, 123, 122, 122, 123, 124, 125, 126, 128, 131, 133, 136, 139, 142, 144, 146, 149, 151, 154, 157, 160, 163, 165, 167, 170, 173, 176, 178, 181, 184, 186, 188, 190, 192, 194, 195, 197, 197, 198, 199, 200, 199, 200, 200, 200, 201, 201, 201, 201, 201, 201, 201, 201, 202, 202, 202, 202, 202, 202, 201, 201, 200, 199, 198, 198, 197, 196, 196, 195, 194, 193, 193, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 180, 179, 177, 176, 175, 174, 172, 171, 169, 168, 166, 165, 164, 163, 161, 159, 158, 157, 155, 154, 152, 150, 148, 146, 145, 143, 141, 140, 138, 136, 135, 134, 132, 131, 130, 128 ]
		
def to_iron_rgb(cnp.ndarray[ndim = 2, dtype = cnp.uint16_t] I):
	cdef int cmin, cmax
	cmin, cmax = np.percentile(I, (1, 99))

	cdef float cmult
	cdef int y, x, c, ind
	cdef cnp.ndarray[uint8_t, ndim = 3, mode = 'c'] oot = np.zeros((I.shape[0], I.shape[1], 3), np.uint8)

	with nogil:
		cmult = 119 / (float)(cmax - cmin)
		for y in range(0, I.shape[0]):
			for x in range(0, I.shape[1]):
				if I[y, x] < cmin:
					ind = 0
				elif I[y, x] > cmax:
					ind = 119
				else:
					ind = (int)((I[y, x] - cmin) * cmult)
				for c in range(0, 3):
					oot[y, x, c] = iron[ind * 3 + c]

	return oot

def to_iron_ycbcr(I16):
	cdef cnp.ndarray[ndim = 2, dtype = cnp.int32_t] I = I16.astype(np.int32)
	cdef cnp.ndarray[ndim = 2, dtype = cnp.int32_t] I2 = I.reshape([I.shape[0] // 2, 2, I.shape[1] // 2, 2]).sum(1, np.int32).sum(2, np.int32)
	cdef int cmin, cmax
	cmin, cmax = np.percentile(I, (1, 99))

	cdef float cmult
	cdef int y, x, c, ind
	cdef cnp.ndarray[uint8_t, ndim = 2, mode = 'c'] Y = np.zeros((I.shape[0], I.shape[1]), np.uint8)
	cdef cnp.ndarray[uint8_t, ndim = 2, mode = 'c'] U = np.zeros((I2.shape[0], I2.shape[1]), np.uint8)
	cdef cnp.ndarray[uint8_t, ndim = 2, mode = 'c'] V = np.zeros((I2.shape[0], I2.shape[1]), np.uint8)

	with nogil:
		cmult = 119 / (float)(cmax - cmin)
		for y in range(0, I.shape[0]):
			for x in range(0, I.shape[1]):
				if I[y, x] < cmin:
					ind = 0
				elif I[y, x] > cmax:
					ind = 119
				else:
					ind = (int)((I[y, x] - cmin) * cmult)
				Y[y, x] = iron_y[ind]

		cmin *= 4
		cmax *= 4
		cmult = 119 / (float)(cmax - cmin)
		for y in range(0, I2.shape[0]):
			for x in range(0, I2.shape[1]):
				if I2[y, x] < cmin:
					ind = 0
				elif I2[y, x] > cmax:
					ind = 119
				else:
					ind = (int)((I2[y, x] - cmin) * cmult)
				U[y, x] = iron_cb[ind]
				V[y, x] = iron_cr[ind]

	return Y, U, V

# vim: ts=8 sts=8 sw=8 noexpandtab
